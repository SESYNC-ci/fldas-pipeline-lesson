---
---

## Drought Monitoring

The [NOAA Climate Prediction Center](http://www.cpc.ncep.noaa.gov/) provides forecasts to assist USAIDs food security programs.

- [International Desks]
  - [Africa]
    - [Weekly Hazards for USAID/FEWS]

===

In the report dated March 29 â€“ April 4, 2018, moisture deficits shown for regions of southern Africa and Madagascar are inferred from regularly updated land surface models. The NASA program that maintains those product, the Famine Early Warning Systems
Network Land Data Assimilation System (FLDAS), also distributes them through the [EARTHDATA] portal.

===

## EARTHDATA

The NASA EARTHDATA site provides web access to the Earth Observing System Data and Information System (EOSDIS), which distributes products from multiple missions to users.

Search for "FLDAS".

=== 

Register for an Earthdata Login. Use the following in a terminal to create a "~/.netrc" file:

```bash
echo "machine urs.earthdata.nasa.gov login ... password ..." > ~/.netrc
chmod 600 ~/.netrc
```

===

```python
from netrc import netrc
username, _, password = netrc().hosts['urs.earthdata.nasa.gov']
```
===

Overwhelmed? The more comprehensive the data portal, the more opaque the access ...

The data archivers (the DAACs) each provide their own portals for the data they distribute, with a potentially easier to navigate application.

===

Search for "FLDAS"

Filter to:
- 0.1 x 0.1 degree
- Monthly

===

Subset by temporal and spatial extent, get the data, and follow instructions.

===

Follow the instructions to [link GES DISC] with your EARTHDATA account.

===

```python
from pydap.client import open_url
from pydap.cas.urs import setup_session

dap = 'https://hydro1.gesdisc.eosdis.nasa.gov/opendap/FLDAS/'
resource = 'FLDAS_NOAH01_C_SA_MA.001/1982/FLDAS_NOAH01_C_SA_MA.ANOM198204.001.nc'
url = dap + resource

session = setup_session(username, password, check_url = url)
dataset = open_url(url, session = session)
dataset.keys()
```

===

```python
varname = 'SoilMoi10_40cm_tavg'
variable = dataset[varname]
variable.shape
```

===

The data array is transmitted along with the dimensions ordered as (bands, rows, columns). In this call, we get all bands (there's only one), the first two rows, and the first three columns.

```python
variable[:, :2, :3].data
```

===

```python
from sys import getsizeof

getsizeof(variable.array.data)
var = variable[:]
getsizeof(var.array.data)
```

===

One imported, all the values are [numpy](){:.pylib} arrays.

```python
import numpy as np

data = var.array.data
dims = {k:v.data for k, v in var.maps.items()}
nodata = dataset.attributes['NC_GLOBAL']['missing_value']

data = np.flip(data, 1).astype('float32')
nodata = data.dtype.type(nodata)
```

===

```python
import rasterio

meta = {
    'driver': 'GTiff',
    'dtype': data.dtype,
    'count': data.shape[0],
    'height': data.shape[1],
    'width': data.shape[2],
    'nodata': nodata,
}
with rasterio.open(varname + '.tif', 'w', **meta) as r:
    r.write(data[0, :, :], 1)
```

===

```python
from rasterio.plot import show

with rasterio.open(varname + '.tif') as r:
    show(r.read(1, masked = True))
```

===

Haven't preserved any georeferencing! Let's add more metadata: the CRS and the extent (as 'transform').

```python
from rasterio.crs import CRS
from rasterio.transform import from_origin

crs = CRS.from_epsg(4326) # a guess!
attr = dataset.attributes['NC_GLOBAL']
transform = from_origin(
    dims['X'][0].item(), # west
    dims['Y'][-1].item(), # north (on flipped Y axis)
    attr['DX'], # xsize
    attr['DY']) # ysize

meta = {
    'driver': 'GTiff',
    'dtype': data.dtype,
    'count': data.shape[0],
    'height': data.shape[1],
    'width': data.shape[2],
    'crs': crs,
    'transform': transform,
    'nodata': nodata,
}
with rasterio.open(varname + '.tif', 'w', **meta) as r:
    r.write(data[0, :, :], 1)
```

===

```python
with rasterio.open(varname + '.tif') as r:
    show((r, 1))
```

===

then look at Limpopo shapefile

```python
import geopandas as gpd

basin = gpd.read_file('Aqueduct_river_basins_LIMPOPO')
```

```python
basin.plot()
```

===

```python
with rasterio.open(varname + '.tif') as r:
    ax = show((r, 1))
basin.plot(ax = ax)
```

===

```python
from rasterio.mask import mask
from shapely import geometry

feature = [geometry.mapping(g) for g in basin['geometry']]
with rasterio.open(varname + '.tif') as r:
    masked, transform = mask(r, feature)
    meta = r.meta.copy()
meta.update({
    'height': masked.shape[1],
    'width': masked.shape[2],
    'transform': transform})
with rasterio.open(varname + '_basin.tif', 'w', **meta) as r:
    r.write(masked)
```

===

```python
with rasterio.open(varname + '_basin.tif') as r:
    show(r.read(1, masked = True))
```

===

```python
from rasterio.windows import get_data_window

with rasterio.open(varname + '_basin.tif') as r:
    y, x = get_data_window(r.read(1, masked=True))

```

```python
bbox = r.bounds
bbox
```

===

```python
wn = bbox.left, bbox.top
es = bbox.right, bbox.bottom
with rasterio.open(varname + '.tif') as r:
    wn_idx = r.index(*wn)
    es_idx = r.index(*es)
y = slice(wn_idx[1], es_idx[1])
x = slice(wn_idx[0], es_idx[0])
```    

```python
var = variable[:, y, x]
```

bbox = '[25.05,Latitude,34.45][-26.55,Longitude,-19.75]'
query = '&bbox="{}"'.format(bbox)
url = dap + resource + query

dataset = open_url(url, session = session)
dataset.keys()
```

===

then go back and try using opendap for time points by the bounding box

```python
```

```python
m = r.read(1, masked = True).mean()
```

===

build pandas table and save it / plot it

[link GES DISC]: https://disc.sci.gsfc.nasa.gov/earthdata-login
[EARTHDATA]: https://earthdata.nasa.gov/
[International Desks]: http://www.cpc.ncep.noaa.gov/products/international/index.shtml
[Africa]: http://www.cpc.ncep.noaa.gov/products/international/africa/africa.shtml
[Weekly Hazards for USAID/FEWS]: http://www.cpc.ncep.noaa.gov/products/international/africa/africa_hazard.pdf
